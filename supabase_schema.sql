-- Supabase DDL Schema for igmembros-manus Django Project
-- Generated on 2025-05-10

-- Disable foreign key checks temporarily if needed for bulk loading or circular dependencies, then re-enable.
-- SET session_replication_role = replica;

-- Extensions (if not already enabled in Supabase)
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Django Internal Tables (Simplified - Supabase might handle some of these automatically or differently)

CREATE TABLE IF NOT EXISTS "django_migrations" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "app" varchar(255) NOT NULL,
    "name" varchar(255) NOT NULL,
    "applied" timestamptz NOT NULL
);

CREATE TABLE IF NOT EXISTS "django_content_type" (
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "app_label" varchar(100) NOT NULL,
    "model" varchar(100) NOT NULL,
    UNIQUE ("app_label", "model")
);

CREATE TABLE IF NOT EXISTS "auth_permission" (
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar(255) NOT NULL,
    "content_type_id" integer NOT NULL REFERENCES "django_content_type"("id") DEFERRABLE INITIALLY DEFERRED,
    "codename" varchar(100) NOT NULL,
    UNIQUE ("content_type_id", "codename")
);
CREATE INDEX IF NOT EXISTS "auth_permission_content_type_id_idx" ON "auth_permission" ("content_type_id");

CREATE TABLE IF NOT EXISTS "auth_group" (
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar(150) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS "auth_group_permissions" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "group_id" integer NOT NULL REFERENCES "auth_group"("id") DEFERRABLE INITIALLY DEFERRED,
    "permission_id" integer NOT NULL REFERENCES "auth_permission"("id") DEFERRABLE INITIALLY DEFERRED,
    UNIQUE ("group_id", "permission_id")
);
CREATE INDEX IF NOT EXISTS "auth_group_permissions_group_id_idx" ON "auth_group_permissions" ("group_id");
CREATE INDEX IF NOT EXISTS "auth_group_permissions_permission_id_idx" ON "auth_group_permissions" ("permission_id");

-- Users App (Assuming custom user model `users_user`)
CREATE TABLE IF NOT EXISTS "users_user" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "password" varchar(128) NOT NULL,
    "last_login" timestamptz NULL,
    "is_superuser" boolean NOT NULL,
    "username" varchar(150) NOT NULL UNIQUE,
    "first_name" varchar(150) NOT NULL,
    "last_name" varchar(150) NOT NULL,
    "email" varchar(254) NOT NULL UNIQUE, -- Django's User model usually has email unique
    "is_staff" boolean NOT NULL,
    "is_active" boolean NOT NULL,
    "date_joined" timestamptz NOT NULL,
    "bio" text NULL,
    "profile_picture" varchar(100) NULL -- Assuming path to image
);

CREATE TABLE IF NOT EXISTS "users_user_groups" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" bigint NOT NULL REFERENCES "users_user"("id") DEFERRABLE INITIALLY DEFERRED,
    "group_id" integer NOT NULL REFERENCES "auth_group"("id") DEFERRABLE INITIALLY DEFERRED,
    UNIQUE ("user_id", "group_id")
);
CREATE INDEX IF NOT EXISTS "users_user_groups_user_id_idx" ON "users_user_groups" ("user_id");
CREATE INDEX IF NOT EXISTS "users_user_groups_group_id_idx" ON "users_user_groups" ("group_id");

CREATE TABLE IF NOT EXISTS "users_user_user_permissions" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" bigint NOT NULL REFERENCES "users_user"("id") DEFERRABLE INITIALLY DEFERRED,
    "permission_id" integer NOT NULL REFERENCES "auth_permission"("id") DEFERRABLE INITIALLY DEFERRED,
    UNIQUE ("user_id", "permission_id")
);
CREATE INDEX IF NOT EXISTS "users_user_user_permissions_user_id_idx" ON "users_user_user_permissions" ("user_id");
CREATE INDEX IF NOT EXISTS "users_user_user_permissions_permission_id_idx" ON "users_user_user_permissions" ("permission_id");

-- Core App
CREATE TABLE IF NOT EXISTS "core_churchconfiguration" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "church_name" varchar(255) NOT NULL,
    "cnpj" varchar(18) NULL UNIQUE, -- Assuming format like XX.XXX.XXX/XXXX-XX
    "email" varchar(254) NULL,
    "phone_number" varchar(20) NULL,
    "address_line1" varchar(255) NULL,
    "address_line2" varchar(255) NULL,
    "city" varchar(100) NULL,
    "state" varchar(50) NULL,
    "postal_code" varchar(10) NULL,
    "country" varchar(50) NULL DEFAULT 'Brasil',
    "website" varchar(200) NULL,
    "logo" varchar(100) NULL, -- Path to logo image
    "president_pastor_name" varchar(255) NULL,
    "secretary_name" varchar(255) NULL,
    "treasurer_name" varchar(255) NULL,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL
);

-- Members App
CREATE TABLE IF NOT EXISTS "members_member" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar(255) NOT NULL,
    "photo" varchar(100) NULL,
    "birth_date" date NULL,
    "gender" varchar(10) NULL, -- e.g., 'male', 'female', 'other'
    "marital_status" varchar(20) NULL, -- e.g., 'single', 'married', 'divorced', 'widowed'
    "nationality" varchar(100) NULL,
    "rg" varchar(20) NULL UNIQUE, -- Registro Geral (ID card)
    "cpf" varchar(14) NULL UNIQUE, -- Cadastro de Pessoas FÃ­sicas (Tax ID)
    "email" varchar(254) NULL UNIQUE,
    "phone_number" varchar(20) NULL,
    "address_line1" varchar(255) NULL,
    "address_line2" varchar(255) NULL,
    "neighborhood" varchar(100) NULL,
    "city" varchar(100) NULL,
    "state" varchar(50) NULL,
    "postal_code" varchar(10) NULL,
    "country" varchar(50) NULL DEFAULT 'Brasil',
    "father_name" varchar(255) NULL,
    "mother_name" varchar(255) NULL,
    "spouse_name" varchar(255) NULL,
    "baptism_date" date NULL,
    "membership_date" date NULL,
    "discipleship_date" date NULL,
    "member_type" varchar(50) NULL, -- e.g., 'member', 'visitor', 'child'
    "status" varchar(20) NOT NULL DEFAULT 'active', -- e.g., 'active', 'inactive', 'transferred', 'deceased'
    "observation" text NULL,
    "created_by_id" bigint NULL REFERENCES "users_user"("id") DEFERRABLE INITIALLY DEFERRED,
    "updated_by_id" bigint NULL REFERENCES "users_user"("id") DEFERRABLE INITIALLY DEFERRED,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "members_member_name_idx" ON "members_member" ("name");
CREATE INDEX IF NOT EXISTS "members_member_status_idx" ON "members_member" ("status");
CREATE INDEX IF NOT EXISTS "members_member_created_by_id_idx" ON "members_member" ("created_by_id");
CREATE INDEX IF NOT EXISTS "members_member_updated_by_id_idx" ON "members_member" ("updated_by_id");

CREATE TABLE IF NOT EXISTS "members_membergroup" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar(100) NOT NULL UNIQUE,
    "description" text NULL,
    "leader_id" bigint NULL REFERENCES "members_member"("id") DEFERRABLE INITIALLY DEFERRED,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "members_membergroup_leader_id_idx" ON "members_membergroup" ("leader_id");

CREATE TABLE IF NOT EXISTS "members_membergroup_members" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "membergroup_id" bigint NOT NULL REFERENCES "members_membergroup"("id") DEFERRABLE INITIALLY DEFERRED,
    "member_id" bigint NOT NULL REFERENCES "members_member"("id") DEFERRABLE INITIALLY DEFERRED,
    UNIQUE ("membergroup_id", "member_id")
);
CREATE INDEX IF NOT EXISTS "members_membergroup_members_membergroup_id_idx" ON "members_membergroup_members" ("membergroup_id");
CREATE INDEX IF NOT EXISTS "members_membergroup_members_member_id_idx" ON "members_membergroup_members" ("member_id");

CREATE TABLE IF NOT EXISTS "members_ministry" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar(100) NOT NULL UNIQUE,
    "description" text NULL,
    "leader_id" bigint NULL REFERENCES "members_member"("id") DEFERRABLE INITIALLY DEFERRED,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "members_ministry_leader_id_idx" ON "members_ministry" ("leader_id");

CREATE TABLE IF NOT EXISTS "members_memberministry" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "member_id" bigint NOT NULL REFERENCES "members_member"("id") DEFERRABLE INITIALLY DEFERRED,
    "ministry_id" bigint NOT NULL REFERENCES "members_ministry"("id") DEFERRABLE INITIALLY DEFERRED,
    "role" varchar(100) NULL, -- e.g., 'Member', 'Leader', 'Coordinator'
    "entry_date" date NULL,
    "departure_date" date NULL,
    "is_active" boolean NOT NULL DEFAULT true,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL,
    UNIQUE ("member_id", "ministry_id")
);
CREATE INDEX IF NOT EXISTS "members_memberministry_member_id_idx" ON "members_memberministry" ("member_id");
CREATE INDEX IF NOT EXISTS "members_memberministry_ministry_id_idx" ON "members_memberministry" ("ministry_id");

-- Finances App
CREATE TABLE IF NOT EXISTS "finances_category" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar(100) NOT NULL UNIQUE,
    "description" text NULL,
    "type" varchar(10) NOT NULL, -- 'income' or 'expense'
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "finances_category_type_idx" ON "finances_category" ("type");

CREATE TABLE IF NOT EXISTS "finances_income" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "description" varchar(255) NOT NULL,
    "amount" decimal(10, 2) NOT NULL,
    "date" date NOT NULL,
    "category_id" bigint NULL REFERENCES "finances_category"("id") DEFERRABLE INITIALLY DEFERRED,
    "member_id" bigint NULL REFERENCES "members_member"("id") DEFERRABLE INITIALLY DEFERRED, -- For tithes/offerings from members
    "observation" text NULL,
    "created_by_id" bigint NULL REFERENCES "users_user"("id") DEFERRABLE INITIALLY DEFERRED,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "finances_income_date_idx" ON "finances_income" ("date");
CREATE INDEX IF NOT EXISTS "finances_income_category_id_idx" ON "finances_income" ("category_id");
CREATE INDEX IF NOT EXISTS "finances_income_member_id_idx" ON "finances_income" ("member_id");
CREATE INDEX IF NOT EXISTS "finances_income_created_by_id_idx" ON "finances_income" ("created_by_id");

CREATE TABLE IF NOT EXISTS "finances_expense" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "description" varchar(255) NOT NULL,
    "amount" decimal(10, 2) NOT NULL,
    "date" date NOT NULL,
    "category_id" bigint NULL REFERENCES "finances_category"("id") DEFERRABLE INITIALLY DEFERRED,
    "observation" text NULL,
    "created_by_id" bigint NULL REFERENCES "users_user"("id") DEFERRABLE INITIALLY DEFERRED,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "finances_expense_date_idx" ON "finances_expense" ("date");
CREATE INDEX IF NOT EXISTS "finances_expense_category_id_idx" ON "finances_expense" ("category_id");
CREATE INDEX IF NOT EXISTS "finances_expense_created_by_id_idx" ON "finances_expense" ("created_by_id");

-- School App
CREATE TABLE IF NOT EXISTS "school_schoolclass" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" varchar(100) NOT NULL UNIQUE,
    "description" text NULL,
    "teacher_id" bigint NULL REFERENCES "members_member"("id") DEFERRABLE INITIALLY DEFERRED,
    "assistant_teacher_id" bigint NULL REFERENCES "members_member"("id") DEFERRABLE INITIALLY DEFERRED,
    "start_age" integer NULL,
    "end_age" integer NULL,
    "location" varchar(100) NULL,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "school_schoolclass_teacher_id_idx" ON "school_schoolclass" ("teacher_id");
CREATE INDEX IF NOT EXISTS "school_schoolclass_assistant_teacher_id_idx" ON "school_schoolclass" ("assistant_teacher_id");

CREATE TABLE IF NOT EXISTS "school_student" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "member_id" bigint NOT NULL UNIQUE REFERENCES "members_member"("id") DEFERRABLE INITIALLY DEFERRED, -- Student is a Member
    "school_class_id" bigint NOT NULL REFERENCES "school_schoolclass"("id") DEFERRABLE INITIALLY DEFERRED,
    "enrollment_date" date NOT NULL,
    "observation" text NULL,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "school_student_school_class_id_idx" ON "school_student" ("school_class_id");

CREATE TABLE IF NOT EXISTS "school_attendance" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "student_id" bigint NOT NULL REFERENCES "school_student"("id") DEFERRABLE INITIALLY DEFERRED,
    "school_class_id" bigint NOT NULL REFERENCES "school_schoolclass"("id") DEFERRABLE INITIALLY DEFERRED,
    "date" date NOT NULL,
    "present" boolean NOT NULL DEFAULT false,
    "observation" text NULL,
    "recorded_by_id" bigint NULL REFERENCES "users_user"("id") DEFERRABLE INITIALLY DEFERRED,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL,
    UNIQUE ("student_id", "school_class_id", "date")
);
CREATE INDEX IF NOT EXISTS "school_attendance_student_id_idx" ON "school_attendance" ("student_id");
CREATE INDEX IF NOT EXISTS "school_attendance_school_class_id_idx" ON "school_attendance" ("school_class_id");
CREATE INDEX IF NOT EXISTS "school_attendance_date_idx" ON "school_attendance" ("date");
CREATE INDEX IF NOT EXISTS "school_attendance_recorded_by_id_idx" ON "school_attendance" ("recorded_by_id");

-- Reports App (for Accountability Reports storage)
CREATE TABLE IF NOT EXISTS "reports_accountabilityreport" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "title" varchar(255) NOT NULL,
    "month" integer NOT NULL,
    "year" integer NOT NULL,
    "description" text NULL,
    "created_by_id" bigint NULL REFERENCES "users_user"("id") DEFERRABLE INITIALLY DEFERRED,
    "created_at" timestamptz NOT NULL,
    "updated_at" timestamptz NOT NULL,
    UNIQUE ("month", "year", "title") -- Or just month, year if only one report type per period
);
CREATE INDEX IF NOT EXISTS "reports_accountabilityreport_created_by_id_idx" ON "reports_accountabilityreport" ("created_by_id");

CREATE TABLE IF NOT EXISTS "reports_accountabilitydocument" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "report_id" bigint NOT NULL REFERENCES "reports_accountabilityreport"("id") DEFERRABLE INITIALLY DEFERRED,
    "document" varchar(100) NOT NULL, -- Path to the document file
    "description" varchar(255) NULL,
    "uploaded_at" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "reports_accountabilitydocument_report_id_idx" ON "reports_accountabilitydocument" ("report_id");

-- Django Admin Log
CREATE TABLE IF NOT EXISTS "django_admin_log" (
    "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "action_time" timestamptz NOT NULL,
    "object_id" text NULL,
    "object_repr" varchar(200) NOT NULL,
    "action_flag" smallint NOT NULL CHECK ("action_flag" >= 0),
    "change_message" text NOT NULL,
    "content_type_id" integer NULL REFERENCES "django_content_type"("id") DEFERRABLE INITIALLY DEFERRED,
    "user_id" bigint NOT NULL REFERENCES "users_user"("id") DEFERRABLE INITIALLY DEFERRED
);
CREATE INDEX IF NOT EXISTS "django_admin_log_content_type_id_idx" ON "django_admin_log" ("content_type_id");
CREATE INDEX IF NOT EXISTS "django_admin_log_user_id_idx" ON "django_admin_log" ("user_id");

-- Django Session Table
CREATE TABLE IF NOT EXISTS "django_session" (
    "session_key" varchar(40) NOT NULL PRIMARY KEY,
    "session_data" text NOT NULL,
    "expire_date" timestamptz NOT NULL
);
CREATE INDEX IF NOT EXISTS "django_session_expire_date_idx" ON "django_session" ("expire_date");

-- Re-enable foreign key checks if they were disabled
-- SET session_replication_role = DEFAULT;

COMMENT ON TABLE "core_churchconfiguration" IS 'Stores the main configuration details for the church using the system.';
COMMENT ON TABLE "members_member" IS 'Stores information about individual church members and visitors.';
COMMENT ON TABLE "finances_income" IS 'Records all income transactions for the church.';
COMMENT ON TABLE "finances_expense" IS 'Records all expense transactions for the church.';
COMMENT ON TABLE "school_schoolclass" IS 'Defines Sunday School classes or other educational groups.';
COMMENT ON TABLE "school_student" IS 'Links a member to a specific school class, representing enrollment.';
COMMENT ON TABLE "school_attendance" IS 'Tracks attendance records for students in school classes.';
COMMENT ON TABLE "reports_accountabilityreport" IS 'Stores metadata for accountability reports (prestaÃ§Ã£o de contas).';
COMMENT ON TABLE "reports_accountabilitydocument" IS 'Stores documents related to accountability reports.';

-- End of DDL Schema

